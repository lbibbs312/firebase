import json
import logging
import os
from typing import Iterator, Optional

# Removed googleapiclient imports
# from googleapiclient.discovery import build
# from googleapiclient.errors import HttpError

# Added openai import
from openai import OpenAI, OpenAIError # Import OpenAIError for better exception handling
from pydantic import BaseModel, SecretStr

from forge.agent.components import ConfigurableComponent
from forge.agent.protocols import CommandProvider, DirectiveProvider
# Ensure 'command' is correctly imported from forge.command
from forge.command import Command, command
from forge.models.config import UserConfigurable
from forge.models.json_schema import JSONSchema
from forge.utils.exceptions import ConfigurationError

logger = logging.getLogger(__name__)


# Configuration now only needs OPENAI_API_KEY (implicitly handled by the OpenAI client)
class WebSearchConfiguration(BaseModel):
    # Configurable model name
    openai_model_name: str = UserConfigurable(
        "gpt-4.1", # Default model from OpenAI docs example
        from_env="OPENAI_SEARCH_MODEL",
        description="The OpenAI model to use for generating the web search response."
    )
    # Configurable search context size, now defaulting to 'high'
    search_context_size: str = UserConfigurable(
        "high", # Default context size set to high
        from_env="OPENAI_SEARCH_CONTEXT_SIZE",
        description="Context size for OpenAI web search (low, medium, high)."
    )
    # Removed google_api_key and google_custom_search_engine_id

class WebSearchComponent(
    DirectiveProvider, CommandProvider, ConfigurableComponent[WebSearchConfiguration]
):
    """Provides commands to search the web using the OpenAI API, localized to Grand Rapids, MI."""

    config_class = WebSearchConfiguration

    def __init__(self, config: Optional[WebSearchConfiguration] = None):
        super().__init__(config)
        # Initialize OpenAI client. It automatically picks up OPENAI_API_KEY from env.
        try:
            self.openai_client = OpenAI()
            # Perform a simple check like listing models if needed, but often not necessary
            # self.openai_client.models.list() # Example check
            logger.info("OpenAI client initialized successfully for web search.")
        except OpenAIError as e:
            logger.error(f"Failed to initialize OpenAI client: {e}")
            raise ConfigurationError(f"OpenAI client initialization failed. Ensure OPENAI_API_KEY is set correctly. Error: {e}")


    def get_resources(self) -> Iterator[str]:
        # Updated resource description to mention localization
        yield "Internet access for searches and information gathering via OpenAI API, localized to Grand Rapids, MI."

    def get_commands(self) -> Iterator[Command]:
        yield self.web_search

    @command(
        ["web_search", "search"],
        # Updated description to mention localization
        "Searches the web using the OpenAI API to answer the query, with results localized to Grand Rapids, MI",
        {
            "query": JSONSchema(
                type=JSONSchema.Type.STRING,
                description="The search query or question",
                required=True,
            ),
            # Removed num_results as it's not a direct parameter for OpenAI's tool
        }
        # *** Removed the unsupported 'return_format' argument ***
        # return_format="Returns a string containing the search results summary generated by the OpenAI model."
    )
    def web_search(self, query: str) -> str:
        """Perform a web search using the OpenAI API, localized to Grand Rapids, MI.

        Args:
            query (str): The search query or question.

        Returns:
            str: A text summary of the search results, potentially including citations.
                 Returns an error message string if the search fails.
        """
        if not query:
            # Return an informative message instead of empty JSON
            return "Cannot perform web search with an empty query."

        logger.info(f"Performing OpenAI web search for query: '{query}' (localized to Grand Rapids, MI) with context size '{self.config.search_context_size}'") # Log context size being used

        try:
            # Call the OpenAI API using the responses endpoint and web_search tool
            response = self.openai_client.responses.create(
                model=self.config.openai_model_name, # Use configured model
                tools=[{
                    "type": "web_search_preview",
                    "search_context_size": self.config.search_context_size, # Use configured context size
                    # *** ADDED: Specify user location for localized results ***
                    "user_location": {
                        "type": "approximate",
                        "city": "Grand Rapids",
                        "region": "MI",
                        "country": "US"
                    }
                }],
                input=query,
                # You might need a timeout, especially with 'high' context
                # timeout=120.0,
            )

            # Extract the output text
            # Based on the docs provided, output_text seems correct.
            if response and hasattr(response, 'output_text') and response.output_text:
                 # The output_text likely contains the summary and inline citations.
                logger.info(f"OpenAI web search successful for query: '{query}' (localized to Grand Rapids, MI)")
                return response.output_text
            else:
                # Handle cases where the response structure is unexpected or empty
                logger.warning(f"OpenAI web search for query '{query}' (localized to Grand Rapids, MI) returned no output text. Response: {response}")
                return f"Web search for '{query}' completed but returned no content."

        except OpenAIError as e:
            logger.error(f"OpenAI API error during web search for query '{query}' (localized to Grand Rapids, MI): {e}")
            # Provide a user-friendly error message
            return f"An error occurred while searching the web with OpenAI: {e}"
        except Exception as e:
            # Catch any other unexpected errors
            logger.exception(f"An unexpected error occurred during web search for query '{query}' (localized to Grand Rapids, MI): {e}")
            return f"An unexpected error occurred during the web search: {e}"

    # Removed safe_google_results as it's no longer needed
